{"version":3,"sources":["stores/TodoModel.js","components/TodoItem.js","components/TodoItems.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","todos","remove","observable","action","TodoItem","observer","onToggle","_this","props","todo","toggle","react_default","a","createElement","class","onChange","type","checked","className","onClick","handleDestroy","value","Component","event","val","_this2","editText","trim","setTitle","viewStore","todoBeingEdited","_this3","destroy","TodoItems","todoStore","map","components_TodoItem","lastID","push","length","ENTER_KEY","TodoEntry","state","handeleKeyDown","keyCode","preventDefault","addTodo","setState","target","onKeyDown","placeholder","autofocus","TodoFooter","getTodoCount","href","App","components_TodoEntry","components_TodoItems","components_TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a66424d3.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\n\nexport default class TodoModel {\n  store;\n  id;\n  @observable title;\n  @observable completed;\n  constructor(store, title, completed, id) {\n    this.store = store;\n    this.title = title;\n    this.completed = completed;\n    this.id = id;\n  }\n  @action\n  toggle() {\n    this.completed = !this.completed;\n  }\n\n  destroy() {\n\t\tthis.store.todos.remove(this);\n\t}\n\n}\n","import React, { Component } from \"react\";\r\nimport {observer} from 'mobx-react';\r\nimport {observable, action, computed} from 'mobx';\r\n\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n  onToggle = () => {\r\n      this.props.todo.toggle()\r\n  };\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <div>\r\n        <li class={todo.completed ? \"completed\" : \" \"}>\r\n          <div class=\"view\">\r\n            <input\r\n              onChange={this.onToggle}\r\n              class=\"toggle\"\r\n              type=\"checkbox\"\r\n              checked={todo.completed}\r\n            />\r\n            <label>{todo.title}</label>\r\n            <button className=\"destroy\" onClick={this.handleDestroy} />          </div>\r\n          <input class=\"edit\" value=\"Create a TodoMVC template\" />\r\n        </li>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @action\r\n\thandleSubmit = (event) => {\r\n\t\tconst val = this.editText.trim();\r\n\t\tif (val) {\r\n\t\t\tthis.props.todo.setTitle(val);\r\n\t\t\tthis.editText = val;\r\n\t\t} else {\r\n\t\t\tthis.handleDestroy();\r\n\t\t}\r\n\t\tthis.props.viewStore.todoBeingEdited = null;\r\n\t};\r\n\r\n\r\n\t@action\r\n\thandleDestroy = () => {\r\n\t\tthis.props.todo.destroy();\r\n\t};\r\n\r\n\r\n}\r\n\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport {observer} from 'mobx-react';\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section class=\"main\">\r\n          <ul class=\"todo-list\">\r\n              {\r\n                  todoStore.todos.map(todo=>{\r\n                      return(\r\n                          <TodoItem todo={todo}/>\r\n                      )\r\n                  })\r\n              }\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItems;\r\n","import { observable, action, computed } from \"mobx\";\nimport TodoModel from \"./TodoModel\";\nimport TodoItems from \"../components/TodoItems\";\n\nclass TodoStore {\n  @observable todos = [];\n  lastID = 0;\n  @action\n  addTodo(title) {\n    this.todos.push(new TodoModel(this, title, false, this.lastID++));\n  }\n  \n  @action\n  getTodoCount(){\n    return this.todos.length\n  }\n}\n\nconst todoStore = new TodoStore();\nexport default todoStore;\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\nconst ENTER_KEY = 13;\r\n\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  handeleKeyDown = (event) => {\r\n    if (event.keyCode !== ENTER_KEY) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    todoStore.addTodo(this.state.value);\r\n\r\n    this.setState({\r\n      value: \" \",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header class=\"header\">\r\n          <h1>todos</h1>\r\n          <input\r\n            value={this.state.value}\r\n            onChange={(event) => this.setState({ value: event.target.value })}\r\n            onKeyDown={(event) => this.handeleKeyDown(event)}\r\n            class=\"new-todo\"\r\n            placeholder=\"What needs to be done?\"\r\n            autofocus\r\n          />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\nclass TodoFooter extends Component {\r\n \r\n\r\n\r\n    \r\n  render() {\r\n    return (\r\n        <footer class=\"footer\">\r\n        <span class=\"todo-count\"><strong>{todoStore.getTodoCount()}</strong> item left</span>\r\n        <ul class=\"filters\">\r\n            <li>\r\n                <a class=\"selected\" href=\"#/\">All</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"#/active\">Active</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"#/completed\">Completed</a>\r\n            </li>\r\n        </ul>\r\n        <button class=\"clear-completed\">Clear completed</button>\r\n        </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoFooter;\r\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport \"./App.css\";\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport TodoFooter from \"./components/TodoFooter\";\n@observer\nclass App extends Component {\n  render() {\n    return [\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry/>\n        <TodoItems/>\n        <TodoFooter/>\n      </div>,\n    ];\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}